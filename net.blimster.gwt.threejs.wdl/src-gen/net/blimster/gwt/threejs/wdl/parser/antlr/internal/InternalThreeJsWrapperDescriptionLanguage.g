/*
* generated by Xtext
*/
grammar InternalThreeJsWrapperDescriptionLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.blimster.gwt.threejs.wdl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.blimster.gwt.threejs.wdl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.blimster.gwt.threejs.wdl.services.ThreeJsWrapperDescriptionLanguageGrammarAccess;

}

@parser::members {

 	private ThreeJsWrapperDescriptionLanguageGrammarAccess grammarAccess;
 	
    public InternalThreeJsWrapperDescriptionLanguageParser(TokenStream input, ThreeJsWrapperDescriptionLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ThreeJsWrapperDescriptionLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getWrappersObjectWrapperParserRuleCall_0()); 
	    }
		lv_wrappers_0_0=ruleObjectWrapper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"wrappers",
        		lv_wrappers_0_0, 
        		"ObjectWrapper");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleObjectWrapper
entryRuleObjectWrapper returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectWrapperRule()); }
	 iv_ruleObjectWrapper=ruleObjectWrapper 
	 { $current=$iv_ruleObjectWrapper.current; } 
	 EOF 
;

// Rule ObjectWrapper
ruleObjectWrapper returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_abstract_0_0=	'abstract' 
    {
        newLeafNode(lv_abstract_0_0, grammarAccess.getObjectWrapperAccess().getAbstractAbstractKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectWrapperRule());
	        }
       		setWithLastConsumed($current, "abstract", true, "abstract");
	    }

)
)?	otherlv_1='class' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getObjectWrapperAccess().getClassKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getObjectWrapperAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectWrapperRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getObjectWrapperAccess().getExtendsKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectWrapperRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getObjectWrapperAccess().getSupertypeObjectWrapperCrossReference_3_1_0()); 
	}

)
))?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getObjectWrapperAccess().getLeftCurlyBracketKeyword_4());
    }
	otherlv_6='package' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getObjectWrapperAccess().getPackageKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectWrapperAccess().getPckQualifiedNameParserRuleCall_6_0()); 
	    }
		lv_pck_7_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectWrapperRule());
	        }
       		set(
       			$current, 
       			"pck",
        		lv_pck_7_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getObjectWrapperAccess().getSemicolonKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectWrapperAccess().getConstructorSectionConstructorSectionParserRuleCall_8_0()); 
	    }
		lv_constructorSection_9_0=ruleConstructorSection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectWrapperRule());
	        }
       		set(
       			$current, 
       			"constructorSection",
        		lv_constructorSection_9_0, 
        		"ConstructorSection");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectWrapperAccess().getPropertySectionPropertySectionParserRuleCall_9_0()); 
	    }
		lv_propertySection_10_0=rulePropertySection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectWrapperRule());
	        }
       		set(
       			$current, 
       			"propertySection",
        		lv_propertySection_10_0, 
        		"PropertySection");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectWrapperAccess().getMethodSectionMethodSectionParserRuleCall_10_0()); 
	    }
		lv_methodSection_11_0=ruleMethodSection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectWrapperRule());
	        }
       		set(
       			$current, 
       			"methodSection",
        		lv_methodSection_11_0, 
        		"MethodSection");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getObjectWrapperAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleConstructorSection
entryRuleConstructorSection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorSectionRule()); }
	 iv_ruleConstructorSection=ruleConstructorSection 
	 { $current=$iv_ruleConstructorSection.current; } 
	 EOF 
;

// Rule ConstructorSection
ruleConstructorSection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstructorSectionAccess().getConstructorSectionAction_0(),
            $current);
    }
)	otherlv_1='constructors:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstructorSectionAccess().getConstructorsKeyword_1());
    }
((
(
		lv_builderConstructor_2_0=	'builder' 
    {
        newLeafNode(lv_builderConstructor_2_0, grammarAccess.getConstructorSectionAccess().getBuilderConstructorBuilderKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructorSectionRule());
	        }
       		setWithLastConsumed($current, "builderConstructor", lv_builderConstructor_2_0, "builder");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstructorSectionAccess().getLeftParenthesisKeyword_2_1());
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstructorSectionAccess().getRightParenthesisKeyword_2_2());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstructorSectionAccess().getSemicolonKeyword_2_3());
    }
)?((
(
		lv_defaultConstructor_6_0=	'default' 
    {
        newLeafNode(lv_defaultConstructor_6_0, grammarAccess.getConstructorSectionAccess().getDefaultConstructorDefaultKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructorSectionRule());
	        }
       		setWithLastConsumed($current, "defaultConstructor", lv_defaultConstructor_6_0, "default");
	    }

)
)	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConstructorSectionAccess().getLeftParenthesisKeyword_3_1());
    }
	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConstructorSectionAccess().getRightParenthesisKeyword_3_2());
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getConstructorSectionAccess().getSemicolonKeyword_3_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorSectionAccess().getConstructorsConstructorParserRuleCall_4_0()); 
	    }
		lv_constructors_10_0=ruleConstructor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorSectionRule());
	        }
       		add(
       			$current, 
       			"constructors",
        		lv_constructors_10_0, 
        		"Constructor");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorRule()); }
	 iv_ruleConstructor=ruleConstructor 
	 { $current=$iv_ruleConstructor.current; } 
	 EOF 
;

// Rule Constructor
ruleConstructor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstructorAccess().getConstructorAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstructorAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstructorAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_3_0()); 
	    }
		lv_parameters_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstructorAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_4_1_0()); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstructorAccess().getRightParenthesisKeyword_5());
    }
(
(
		lv_json_7_0=	'json' 
    {
        newLeafNode(lv_json_7_0, grammarAccess.getConstructorAccess().getJsonJsonKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructorRule());
	        }
       		setWithLastConsumed($current, "json", true, "json");
	    }

)
)?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConstructorAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRulePropertySection
entryRulePropertySection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertySectionRule()); }
	 iv_rulePropertySection=rulePropertySection 
	 { $current=$iv_rulePropertySection.current; } 
	 EOF 
;

// Rule PropertySection
rulePropertySection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='properties:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertySectionAccess().getPropertiesKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPropertySectionAccess().getPropertySectionAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertySectionAccess().getPropertiesPropertyParserRuleCall_2_0()); 
	    }
		lv_properties_2_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertySectionRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_2_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_readOnly_0_0=	'readonly' 
    {
        newLeafNode(lv_readOnly_0_0, grammarAccess.getPropertyAccess().getReadOnlyReadonlyKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "readOnly", true, "readonly");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleMethodSection
entryRuleMethodSection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodSectionRule()); }
	 iv_ruleMethodSection=ruleMethodSection 
	 { $current=$iv_ruleMethodSection.current; } 
	 EOF 
;

// Rule MethodSection
ruleMethodSection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='methods:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMethodSectionAccess().getMethodsKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getMethodSectionAccess().getMethodSectionAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodSectionAccess().getMethodsMethodParserRuleCall_2_0()); 
	    }
		lv_methods_2_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodSectionRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_2_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getReturnTypeTypeParserRuleCall_0_0()); 
	    }
		lv_returnType_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_3_0_0()); 
	    }
		lv_parameters_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_3_1_1_0()); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getDatatypeDatatypeEnumRuleCall_0_0_0()); 
	    }
		lv_datatype_0_0=ruleDatatype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"datatype",
        		lv_datatype_0_0, 
        		"Datatype");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getWrapperObjectWrapperCrossReference_0_1_0()); 
	}

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getArrayTypeArrayTypeParserRuleCall_1_0()); 
	    }
		lv_arrayType_2_0=ruleArrayType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"arrayType",
        		lv_arrayType_2_0, 
        		"ArrayType");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleArrayType
entryRuleArrayType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	 iv_ruleArrayType=ruleArrayType 
	 { $current=$iv_ruleArrayType.current; } 
	 EOF 
;

// Rule ArrayType
ruleArrayType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayTypeAccess().getArrayTypeAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		lv_dimensions_2_0=RULE_INT
		{
			newLeafNode(lv_dimensions_2_0, grammarAccess.getArrayTypeAccess().getDimensionsINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dimensions",
        		lv_dimensions_2_0, 
        		"INT");
	    }

)
)?	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule Datatype
ruleDatatype returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='int' 
	{
        $current = grammarAccess.getDatatypeAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDatatypeAccess().getINTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='float' 
	{
        $current = grammarAccess.getDatatypeAccess().getFLOATEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDatatypeAccess().getFLOATEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='boolean' 
	{
        $current = grammarAccess.getDatatypeAccess().getBOOLEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDatatypeAccess().getBOOLEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='string' 
	{
        $current = grammarAccess.getDatatypeAccess().getSTRINGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDatatypeAccess().getSTRINGEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


